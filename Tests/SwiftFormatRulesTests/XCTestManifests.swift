#if !canImport(ObjectiveC)
import XCTest

extension AllPublicDeclarationsHaveDocumentationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AllPublicDeclarationsHaveDocumentationTests = [
        ("testPublicDeclsWithoutDocs", testPublicDeclsWithoutDocs),
    ]
}

extension AlwaysUseLowerCamelCaseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AlwaysUseLowerCamelCaseTests = [
        ("testInvalidVariableCasing", testInvalidVariableCasing),
    ]
}

extension AmbiguousTrailingClosureOverloadTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AmbiguousTrailingClosureOverloadTests = [
        ("testAmbiguousOverloads", testAmbiguousOverloads),
    ]
}

extension BeginDocumentationCommentWithOneLineSummaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BeginDocumentationCommentWithOneLineSummaryTests = [
        ("testApproximationsOnMacOS", testApproximationsOnMacOS),
        ("testBlockLineCommentsWithoutOneSentenceSummary", testBlockLineCommentsWithoutOneSentenceSummary),
        ("testDocLineCommentsWithoutOneSentenceSummary", testDocLineCommentsWithoutOneSentenceSummary),
    ]
}

extension BlankLineBetweenMembersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BlankLineBetweenMembersTests = [
        ("testBlankLineBeforeFirstChildOrNot", testBlankLineBeforeFirstChildOrNot),
        ("testBlankLineBetweenMembersIgnoreSingleLineDisabled", testBlankLineBetweenMembersIgnoreSingleLineDisabled),
        ("testBlankLinesAroundDocumentedMembers", testBlankLinesAroundDocumentedMembers),
        ("testInvalidBlankLineBetweenMembers", testInvalidBlankLineBetweenMembers),
        ("testNestedMembers", testNestedMembers),
        ("testNoBlankLineBetweenSingleLineMembers", testNoBlankLineBetweenSingleLineMembers),
        ("testTrailingCommentsAreKeptTrailing", testTrailingCommentsAreKeptTrailing),
        ("testTwoMembers", testTwoMembers),
    ]
}

extension DoNotUseSemicolonsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DoNotUseSemicolonsTests = [
        ("testNewlinesAfterSemicolons", testNewlinesAfterSemicolons),
        ("testSemicolonsInMemberLists", testSemicolonsInMemberLists),
        ("testSemicolonsInNestedStatements", testSemicolonsInNestedStatements),
        ("testSemicolonUse", testSemicolonUse),
    ]
}

extension DontRepeatTypeInStaticPropertiesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DontRepeatTypeInStaticPropertiesTests = [
        ("testDottedExtendedType", testDottedExtendedType),
        ("testRepetitiveProperties", testRepetitiveProperties),
        ("testSR11123", testSR11123),
    ]
}

extension FullyIndirectEnumTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FullyIndirectEnumTests = [
        ("testAllIndirectCases", testAllIndirectCases),
        ("testAlreadyIndirectEnum", testAlreadyIndirectEnum),
        ("testCaselessEnum", testCaselessEnum),
        ("testNotAllIndirectCases", testNotAllIndirectCases),
    ]
}

extension GroupNumericLiteralsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GroupNumericLiteralsTests = [
        ("testNumericGrouping", testNumericGrouping),
    ]
}

extension IdentifiersMustBeASCIITests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IdentifiersMustBeASCIITests = [
        ("testInvalidIdentifiers", testInvalidIdentifiers),
    ]
}

extension MultiLineTrailingCommasTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MultiLineTrailingCommasTests = [
        ("testMissedTrailingCommas", testMissedTrailingCommas),
    ]
}

extension NeverForceUnwrapTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NeverForceUnwrapTests = [
        ("testIgnoreTestCode", testIgnoreTestCode),
        ("testUnsafeUnwrap", testUnsafeUnwrap),
    ]
}

extension NeverUseForceTryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NeverUseForceTryTests = [
        ("testAllowForceTryInTestCode", testAllowForceTryInTestCode),
        ("testInvalidTryExpression", testInvalidTryExpression),
    ]
}

extension NeverUseImplicitlyUnwrappedOptionalsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NeverUseImplicitlyUnwrappedOptionalsTests = [
        ("testIgnoreTestCode", testIgnoreTestCode),
        ("testInvalidVariableUnwrapping", testInvalidVariableUnwrapping),
    ]
}

extension NoAccessLevelOnExtensionDeclarationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoAccessLevelOnExtensionDeclarationTests = [
        ("testExtensionDeclarationAccessLevel", testExtensionDeclarationAccessLevel),
        ("testExtensionWithAnnotation", testExtensionWithAnnotation),
        ("testPreservesCommentOnRemovedModifier", testPreservesCommentOnRemovedModifier),
        ("testPreservesInlineAnnotationsBeforeAddedAccessLevelModifiers", testPreservesInlineAnnotationsBeforeAddedAccessLevelModifiers),
        ("testPreservesMultiLineAnnotationsBeforeAddedAccessLevelModifiers", testPreservesMultiLineAnnotationsBeforeAddedAccessLevelModifiers),
        ("testPrivateIsEffectivelyFileprivate", testPrivateIsEffectivelyFileprivate),
    ]
}

extension NoBlockCommentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoBlockCommentsTests = [
        ("testRemoveBlockComments", testRemoveBlockComments),
    ]
}

extension NoCasesWithOnlyFallthroughTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoCasesWithOnlyFallthroughTests = [
        ("testCasesInsideConditionalCompilationBlock", testCasesInsideConditionalCompilationBlock),
        ("testCasesWithWhereClauses", testCasesWithWhereClauses),
        ("testCommentsAroundCombinedCasesStayInPlace", testCommentsAroundCombinedCasesStayInPlace),
        ("testFallthroughCases", testFallthroughCases),
        ("testFallthroughCasesWithCommentsAreNotCombined", testFallthroughCasesWithCommentsAreNotCombined),
        ("testNestedSwitches", testNestedSwitches),
    ]
}

extension NoEmptyTrailingClosureParenthesesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoEmptyTrailingClosureParenthesesTests = [
        ("testInvalidEmptyParenTrailingClosure", testInvalidEmptyParenTrailingClosure),
    ]
}

extension NoLabelsInCasePatternsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoLabelsInCasePatternsTests = [
        ("testRedundantCaseLabels", testRedundantCaseLabels),
    ]
}

extension NoLeadingUnderscoresTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoLeadingUnderscoresTests = [
        ("testClasses", testClasses),
        ("testEnums", testEnums),
        ("testFunctions", testFunctions),
        ("testIdentifiersAreIgnoredAtUsage", testIdentifiersAreIgnoredAtUsage),
        ("testInitializerArguments", testInitializerArguments),
        ("testPrecedenceGroups", testPrecedenceGroups),
        ("testProtocols", testProtocols),
        ("testStructs", testStructs),
        ("testTypealiases", testTypealiases),
        ("testVars", testVars),
    ]
}

extension NoParensAroundConditionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoParensAroundConditionsTests = [
        ("testParensAroundConditions", testParensAroundConditions),
    ]
}

extension NoVoidReturnOnFunctionSignatureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NoVoidReturnOnFunctionSignatureTests = [
        ("testVoidReturns", testVoidReturns),
    ]
}

extension OneCasePerLineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OneCasePerLineTests = [
        ("testAttributesArePropagated", testAttributesArePropagated),
        ("testCommentsAreNotRepeated", testCommentsAreNotRepeated),
        ("testElementOrderIsPreserved", testElementOrderIsPreserved),
        ("testInvalidCasesOnLine", testInvalidCasesOnLine),
    ]
}

extension OneVariableDeclarationPerLineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OneVariableDeclarationPerLineTests = [
        ("testMultipleVariableBindings", testMultipleVariableBindings),
        ("testNestedVariableBindings", testNestedVariableBindings),
    ]
}

extension OnlyOneTrailingClosureArgumentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OnlyOneTrailingClosureArgumentTests = [
        ("testInvalidTrailingClosureCall", testInvalidTrailingClosureCall),
    ]
}

extension OrderedImportsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrderedImportsTests = [
        ("testDisableOrderedImports", testDisableOrderedImports),
        ("testDisableOrderedImportsMovingComments", testDisableOrderedImportsMovingComments),
        ("testEmptyFile", testEmptyFile),
        ("testImportsOrderWithDocComment", testImportsOrderWithDocComment),
        ("testImportsOrderWithoutModuleType", testImportsOrderWithoutModuleType),
        ("testInvalidImportsOrder", testInvalidImportsOrder),
        ("testNonHeaderComment", testNonHeaderComment),
        ("testSeparatedFileHeader", testSeparatedFileHeader),
        ("testValidOrderedImport", testValidOrderedImport),
    ]
}

extension ReturnVoidInsteadOfEmptyTupleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReturnVoidInsteadOfEmptyTupleTests = [
        ("testEmptyTupleReturns", testEmptyTupleReturns),
    ]
}

extension UseEarlyExitsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseEarlyExitsTests = [
        ("testBasicIfElse", testBasicIfElse),
        ("testComplex", testComplex),
        ("testElseIfsDoNotChange", testElseIfsDoNotChange),
        ("testElsesAtEndOfElseIfsDoNotChange", testElsesAtEndOfElseIfsDoNotChange),
        ("testIfElseWithBothEarlyExiting", testIfElseWithBothEarlyExiting),
    ]
}

extension UseEnumForNamespacingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseEnumForNamespacingTests = [
        ("testNonEnumsUsedAsNamespaces", testNonEnumsUsedAsNamespaces),
    ]
}

extension UseLetInEveryBoundCaseVariableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseLetInEveryBoundCaseVariableTests = [
        ("testInvalidLetBoundCase", testInvalidLetBoundCase),
    ]
}

extension UseShorthandTypeNamesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseShorthandTypeNamesTests = [
        ("testFunctionTypesAreOnlyWrappedWhenShortenedAsOptionals", testFunctionTypesAreOnlyWrappedWhenShortenedAsOptionals),
        ("testModuleQualifiedNamesAreNotShortened", testModuleQualifiedNamesAreNotShortened),
        ("testNamesInNonMemberAccessExpressionContextsAreShortened", testNamesInNonMemberAccessExpressionContextsAreShortened),
        ("testNamesInTypeContextsAreShortened", testNamesInTypeContextsAreShortened),
        ("testNestedNamesInNonMemberAccessExpressionContextsAreShortened", testNestedNamesInNonMemberAccessExpressionContextsAreShortened),
        ("testNestedNamesInTypeContextsAreShortened", testNestedNamesInTypeContextsAreShortened),
        ("testPreservesNestedGenericsForUnshortenedTypes", testPreservesNestedGenericsForUnshortenedTypes),
        ("testTypesWeDoNotCareAboutAreUnchanged", testTypesWeDoNotCareAboutAreUnchanged),
        ("testTypesWithEmptyTupleAsGenericArgumentAreNotShortenedInExpressionContexts", testTypesWithEmptyTupleAsGenericArgumentAreNotShortenedInExpressionContexts),
        ("testTypesWithIncorrectNumbersOfGenericArgumentsAreNotChanged", testTypesWithIncorrectNumbersOfGenericArgumentsAreNotChanged),
        ("testTypesWithMemberAccessesAreNotShortened", testTypesWithMemberAccessesAreNotShortened),
    ]
}

extension UseSingleLinePropertyGetterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseSingleLinePropertyGetterTests = [
        ("testMultiLinePropertyGetter", testMultiLinePropertyGetter),
    ]
}

extension UseSynthesizedInitializerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseSynthesizedInitializerTests = [
        ("testCustomInitializerVoidsSynthesizedInitializerWarning", testCustomInitializerVoidsSynthesizedInitializerWarning),
        ("testCustomInitializerWithExtraParameters", testCustomInitializerWithExtraParameters),
        ("testCustomInitializerWithExtraStatements", testCustomInitializerWithExtraStatements),
        ("testCustomInitializerWithMismatchedTypes", testCustomInitializerWithMismatchedTypes),
        ("testFailableMemberwiseInitializerIsNotDiagnosed", testFailableMemberwiseInitializerIsNotDiagnosed),
        ("testMemberwiseInitializerIsDiagnosed", testMemberwiseInitializerIsDiagnosed),
        ("testMemberwiseInitializerMissingDefaultValues", testMemberwiseInitializerMissingDefaultValues),
        ("testMemberwiseInitializerWithDefaultArgument", testMemberwiseInitializerWithDefaultArgument),
        ("testMemberwiseInitializerWithDefaultArgumentIsDiagnosed", testMemberwiseInitializerWithDefaultArgumentIsDiagnosed),
        ("testMemberwiseInitializerWithNonMatchingDefaultValues", testMemberwiseInitializerWithNonMatchingDefaultValues),
        ("testPublicMemberwiseInitializerIsNotDiagnosed", testPublicMemberwiseInitializerIsNotDiagnosed),
        ("testThrowingMemberwiseInitializerIsNotDiagnosed", testThrowingMemberwiseInitializerIsNotDiagnosed),
    ]
}

extension UseTripleSlashForDocumentationCommentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseTripleSlashForDocumentationCommentsTests = [
        ("testRemoveDocBlockComments", testRemoveDocBlockComments),
        ("testRemoveDocBlockCommentsWithoutStars", testRemoveDocBlockCommentsWithoutStars),
    ]
}

extension UseWhereClausesInForLoopsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UseWhereClausesInForLoopsTests = [
        ("testForLoopWhereClauses", testForLoopWhereClauses),
    ]
}

extension ValidateDocumentationCommentsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValidateDocumentationCommentsTests = [
        ("testInitializer", testInitializer),
        ("testParameterDocumentation", testParameterDocumentation),
        ("testParametersName", testParametersName),
        ("testReturnDocumentation", testReturnDocumentation),
        ("testSeparateLabelAndIdentifier", testSeparateLabelAndIdentifier),
        ("testValidDocumentation", testValidDocumentation),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AllPublicDeclarationsHaveDocumentationTests.__allTests__AllPublicDeclarationsHaveDocumentationTests),
        testCase(AlwaysUseLowerCamelCaseTests.__allTests__AlwaysUseLowerCamelCaseTests),
        testCase(AmbiguousTrailingClosureOverloadTests.__allTests__AmbiguousTrailingClosureOverloadTests),
        testCase(BeginDocumentationCommentWithOneLineSummaryTests.__allTests__BeginDocumentationCommentWithOneLineSummaryTests),
        testCase(BlankLineBetweenMembersTests.__allTests__BlankLineBetweenMembersTests),
        testCase(DoNotUseSemicolonsTests.__allTests__DoNotUseSemicolonsTests),
        testCase(DontRepeatTypeInStaticPropertiesTests.__allTests__DontRepeatTypeInStaticPropertiesTests),
        testCase(FullyIndirectEnumTests.__allTests__FullyIndirectEnumTests),
        testCase(GroupNumericLiteralsTests.__allTests__GroupNumericLiteralsTests),
        testCase(IdentifiersMustBeASCIITests.__allTests__IdentifiersMustBeASCIITests),
        testCase(MultiLineTrailingCommasTests.__allTests__MultiLineTrailingCommasTests),
        testCase(NeverForceUnwrapTests.__allTests__NeverForceUnwrapTests),
        testCase(NeverUseForceTryTests.__allTests__NeverUseForceTryTests),
        testCase(NeverUseImplicitlyUnwrappedOptionalsTests.__allTests__NeverUseImplicitlyUnwrappedOptionalsTests),
        testCase(NoAccessLevelOnExtensionDeclarationTests.__allTests__NoAccessLevelOnExtensionDeclarationTests),
        testCase(NoBlockCommentsTests.__allTests__NoBlockCommentsTests),
        testCase(NoCasesWithOnlyFallthroughTests.__allTests__NoCasesWithOnlyFallthroughTests),
        testCase(NoEmptyTrailingClosureParenthesesTests.__allTests__NoEmptyTrailingClosureParenthesesTests),
        testCase(NoLabelsInCasePatternsTests.__allTests__NoLabelsInCasePatternsTests),
        testCase(NoLeadingUnderscoresTests.__allTests__NoLeadingUnderscoresTests),
        testCase(NoParensAroundConditionsTests.__allTests__NoParensAroundConditionsTests),
        testCase(NoVoidReturnOnFunctionSignatureTests.__allTests__NoVoidReturnOnFunctionSignatureTests),
        testCase(OneCasePerLineTests.__allTests__OneCasePerLineTests),
        testCase(OneVariableDeclarationPerLineTests.__allTests__OneVariableDeclarationPerLineTests),
        testCase(OnlyOneTrailingClosureArgumentTests.__allTests__OnlyOneTrailingClosureArgumentTests),
        testCase(OrderedImportsTests.__allTests__OrderedImportsTests),
        testCase(ReturnVoidInsteadOfEmptyTupleTests.__allTests__ReturnVoidInsteadOfEmptyTupleTests),
        testCase(UseEarlyExitsTests.__allTests__UseEarlyExitsTests),
        testCase(UseEnumForNamespacingTests.__allTests__UseEnumForNamespacingTests),
        testCase(UseLetInEveryBoundCaseVariableTests.__allTests__UseLetInEveryBoundCaseVariableTests),
        testCase(UseShorthandTypeNamesTests.__allTests__UseShorthandTypeNamesTests),
        testCase(UseSingleLinePropertyGetterTests.__allTests__UseSingleLinePropertyGetterTests),
        testCase(UseSynthesizedInitializerTests.__allTests__UseSynthesizedInitializerTests),
        testCase(UseTripleSlashForDocumentationCommentsTests.__allTests__UseTripleSlashForDocumentationCommentsTests),
        testCase(UseWhereClausesInForLoopsTests.__allTests__UseWhereClausesInForLoopsTests),
        testCase(ValidateDocumentationCommentsTests.__allTests__ValidateDocumentationCommentsTests),
    ]
}
#endif
